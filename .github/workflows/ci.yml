name: CI - Lint and Test

on:
  pull_request:
    branches: ['*']
  push:
    branches: ['*']

jobs:
  iam:
    runs-on: ubuntu-latest
    name: IAM Service â€“ Lint & Test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          # Match your project's requires-python version
          python-version: '3.11'
          # Removed: Caching for 'uv' is not supported by actions/setup-python
          # cache: 'uv'

      - name: Install uv
        # Ensure uv is installed and added to PATH for subsequent steps
        # This uses the official uv install script
        run: |
          curl -Ls https://astral.sh/uv/install.sh | bash
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies with uv
        working-directory: ffmint-iam
        # uv sync installs both project dependencies and dev-dependencies from pyproject.toml
        run: uv sync

      - name: Lint with Ruff (Check only)
        working-directory: ffmint-iam
        # Ruff's configuration is in pyproject.toml
        # 'check .' tells Ruff to lint the current directory and its subdirectories
        # Ruff will automatically use your pyproject.toml settings (line-length, lint.select including 'I' for isort)
        run: uv run ruff check .

      - name: Format with Black (Check only)
        working-directory: ffmint-iam
        # Black's configuration is usually in pyproject.toml or a separate black config
        # '--check --diff' ensures it only reports differences without modifying files
        run: uv run black --check --diff .

      - name: Lint with Pylint
        working-directory: ffmint-iam
        # Pylint's configuration is in pyproject.toml
        # 'app' explicitly tells Pylint to lint only the 'app' directory as per your pyproject.toml's recursive setting
        run: uv run pylint app

      - name: Run tests with pytest
        working-directory: ffmint-iam
        # Pytest's configuration is in pyproject.toml
        # 'uv run pytest' ensures pytest is run via uv and picks up pyproject.toml settings
        run: uv run pytest

  # storage:
  #   runs-on: ubuntu-latest
  #   name: Storage Service - Lint & Test
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.10'
  #         # Removed: Caching for 'uv' is not supported by actions/setup-python
  #         # cache: 'uv'
  #
  #     - name: Install uv
  #       working-directory: ffm-storage
  #       run: |
  #         curl -Ls https://astral.sh/uv/install.sh | bash
  #         echo "$HOME/.cargo/bin" >> $GITHUB_PATH
  #
  #     - name: Install dependencies with uv
  #       working-directory: ffm-storage
  #       run: uv sync
  #
  #     - name: Lint with Ruff
  #       working-directory: ffm-storage
  #       run: uv run ruff check .
  #
  #     - name: Format with Black (Check only)
  #       working-directory: ffm-storage
  #       run: uv run black --check --diff .
  #
  #     - name: Lint with Pylint
  #       working-directory: ffm-storage
  #       run: uv run pylint app # Adjust if 'app' is not the correct main source folder for 'storage'
  #
  #     - name: Run tests with pytest
  #       working-directory: ffm-storage
  #       run: uv run pytest
